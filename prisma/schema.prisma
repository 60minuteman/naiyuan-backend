generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique
  phoneNumber          String?
  password             String?
  firstName            String?
  lastName             String?
  middleName           String?
  bvn                  String?
  nin                  String?
  dateOfBirth          DateTime?
  lgaOfOrigin          String?
  stateOfOrigin        String?
  residentialAddress   String?
  verificationStatus   VerificationStatus    @default(PENDING)
  bvnResponse          Json?
  ninResponse          Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  fcmToken             String?
  devices              Device[]
  notifications        Notification[]
  notificationSettings NotificationSettings?
  otps                 OTPStore[]
  paymentAccounts      PaymentAccount[]
  transactions         Transaction[]
  virtualAccounts      VirtualAccount[]
}

model OTPStore {
  id        Int      @id @default(autoincrement())
  email     String
  otp       String
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    Int
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model VirtualAccount {
  id            String   @id @default(uuid())
  reference     String   @unique
  accountNumber String
  bankName      String
  currency      String
  status        String
  paymentType   String
  userId        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  accountName   String
  amount        Float
  description   String?
  user          User     @relation(fields: [userId], references: [id])
}

model Transaction {
  userId      Int
  amount      Float
  status      TransactionStatus @default(COMPLETED)
  reference   String            @unique
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  paymentType PaymentMethod
  recipient   String?
  sender      String?
  subtitle    String?
  time        DateTime          @default(now())
  title       String
  id          Int               @id @default(autoincrement())
  user        User              @relation(fields: [userId], references: [id])
}

model PaymentAccount {
  id          String   @id @default(uuid())
  userId      Int
  accountType String
  currency    String
  balance     Float
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int                @id @default(autoincrement())
  userId    Int
  title     String
  body      String
  data      Json?
  messageId String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  readAt    DateTime?
  type      NotificationType   @default(SYSTEM)
  status    NotificationStatus @default(PENDING)
  user      User               @relation(fields: [userId], references: [id])
}

model NotificationSettings {
  id                   Int     @id @default(autoincrement())
  userId               Int     @unique
  pushEnabled          Boolean @default(true)
  emailEnabled         Boolean @default(true)
  transactionalEnabled Boolean @default(true)
  marketingEnabled     Boolean @default(true)
  user                 User    @relation(fields: [userId], references: [id])
}

model NotificationTemplate {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  title     String
  body      String
  type      String
  variables Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Device {
  id          Int        @id @default(autoincrement())
  userId      Int
  deviceToken String
  deviceModel String?
  osVersion   String?
  appVersion  String?
  isActive    Boolean    @default(true)
  lastUsedAt  DateTime   @default(now())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deviceType  DeviceType
  user        User       @relation(fields: [userId], references: [id])

  @@unique([userId, deviceToken])
  @@index([deviceToken])
}

enum VerificationStatus {
  PENDING
  VERIFIED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  ALIPAY
  WECHAT
  BANK_TRANSFER
  CASH
  E_YUAN
  QQ_PAY
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  READ
}

enum NotificationType {
  TRANSACTION
  MARKETING
  SYSTEM
}

enum DeviceType {
  IOS
  ANDROID
  WEB
}
