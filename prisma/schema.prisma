generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                @id @default(autoincrement())
  email              String             @unique
  phoneNumber        String?
  password           String?
  firstName          String?
  lastName           String?
  middleName         String?
  bvn                String?
  nin                String?
  dateOfBirth        DateTime?
  lgaOfOrigin        String?
  stateOfOrigin      String?
  residentialAddress String?
  verificationStatus VerificationStatus @default(PENDING)
  bvnResponse        Json?
  ninResponse        Json?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  otps               OTPStore[]
  paymentAccounts    PaymentAccount[]
  transactions       Transaction[]
  virtualAccounts    VirtualAccount[]
}

model OTPStore {
  id        Int      @id @default(autoincrement())
  email     String
  otp       String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [email], references: [email])

  @@index([email])
}

model VirtualAccount {
  id            String   @id @default(uuid())
  userId        Int
  reference     String   @unique
  accountNumber String
  accountName   String
  bankName      String
  currency      String
  amount        Float
  status        String
  paymentType   String
  description   String?  // Make this field optional
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id               String            @id @default(uuid())
  userId           Int
  amount           Float
  currency         String
  status           TransactionStatus @default(PENDING)
  paymentMethod    PaymentMethod
  recipientName    String
  recipientContact String?
  bankName         String?
  accountNumber    String?
  accountName      String?
  reference        String            @unique
  description      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [userId], references: [id])
}

model PaymentAccount {
  id          String   @id @default(uuid())
  userId      Int
  accountType String
  currency    String
  balance     Float
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

enum VerificationStatus {
  PENDING
  SUCCESS
  FAILED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  ALIPAY
  WECHAT
  BANK_TRANSFER
  CASH
  E_YUAN
  QQ_PAY
}
