generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                @id @default(autoincrement())
  email              String             @unique
  phoneNumber        String?
  password           String?
  firstName          String?
  lastName           String?
  middleName         String?
  bvn                String?
  nin                String?
  dateOfBirth        DateTime?
  lgaOfOrigin        String?
  stateOfOrigin      String?
  residentialAddress String?
  verificationStatus VerificationStatus @default(PENDING)
  bvnResponse        Json?
  ninResponse        Json?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  otps               OTPStore[]
  paymentAccounts    PaymentAccount[]
  transactions       Transaction[]
  virtualAccounts    VirtualAccount[]
  fcmToken     String?
  notifications Notification[]
  notificationSettings NotificationSettings?
  devices     Device[]
}

model OTPStore {
  id        Int      @id @default(autoincrement())
  otp       String
  email     String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VirtualAccount {
  id            String   @id @default(uuid())
  userId        Int
  reference     String   @unique
  accountNumber String
  accountName   String
  bankName      String
  currency      String
  amount        Float
  status        String
  paymentType   String
  description   String?  // Make this field optional
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id          Int      @id @default(autoincrement())
  title       String
  subtitle    String?
  amount      Float
  time        DateTime @default(now())
  status      TransactionStatus @default(COMPLETED)
  recipient   String?
  sender      String?
  description String?
  paymentType PaymentMethod
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  reference   String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PaymentAccount {
  id          String   @id @default(uuid())
  userId      Int
  accountType String
  currency    String
  balance     Float
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      Int
  title       String
  body        String
  data        Json?
  status      NotificationStatus @default(PENDING)
  messageId   String?
  type        NotificationType  @default(SYSTEM)
  readAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model NotificationSettings {
  id                    Int      @id @default(autoincrement())
  userId               Int      @unique
  pushEnabled          Boolean  @default(true)
  emailEnabled         Boolean  @default(true)
  transactionalEnabled Boolean  @default(true)
  marketingEnabled     Boolean  @default(true)
  user                 User     @relation(fields: [userId], references: [id])
}

model NotificationTemplate {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  title       String
  body        String
  type        String   // TRANSACTION, MARKETING, SYSTEM, etc.
  variables   Json?    // Template variables
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Device {
  id          Int      @id @default(autoincrement())
  userId      Int
  deviceToken String
  deviceType  DeviceType
  deviceModel String?
  osVersion   String?
  appVersion  String?
  isActive    Boolean  @default(true)
  lastUsedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, deviceToken])
  @@index([deviceToken])
}

enum VerificationStatus {
  PENDING
  VERIFIED
}
enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  ALIPAY
  WECHAT
  BANK_TRANSFER
  CASH
  E_YUAN
  QQ_PAY
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  READ
}

enum NotificationType {
  TRANSACTION
  MARKETING
  SYSTEM
}

enum DeviceType {
  IOS
  ANDROID
  WEB
}

